#+title: Literate Config
#+PROPERTY: header-args :tangle config.el

* Table Of Contents :toc:
- [[#how-to-use-this-file][How To Use This File]]
- [[#warning-message][Warning Message]]
- [[#theme][Theme]]
- [[#org-mode][Org Mode]]
- [[#org-roam][Org Roam]]
- [[#org-agenda][Org Agenda]]
- [[#go-specific-configuration][Go Specific Configuration]]
  - [[#organize-imports-on-save][Organize imports on save]]
  - [[#gofumpt][gofumpt]]
  - [[#gopls][gopls]]
- [[#org-babel][Org Babel]]
  - [[#languages-to-include][Languages to include]]
  - [[#structure-templates][Structure Templates]]

* How To Use This File
This file is used as a literate configuration file that config.el can be generated from via tangle. After updating this file, follow the steps below to re-generate config.el.
1. Refresh
   Put cursor on the title line.
   Do a Local Refresh (C-c C-c)
2. Tangle code blocks to config.el
   Run org-babel-tangle (C-c C-v t)

* Warning Message
#+begin_src emacs-lisp

;; DO NOT EDIT THIS FILE DIRECTLY
;; This file is generated from literate_config.el.
;; Any changes desired in this file should be made in the appropriate section of literate_config.el and then this file should be regenerated.

#+end_src

* Theme
#+begin_src emacs-lisp

(setq doom-font (font-spec :family "Fira Code iScript" :size 16)
      doom-variable-pitch-font (font-spec :family "Fira Code" :size 16)
      doom-big-font (font-spec :family "Fira Code" :size 20))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic))

;; `gruvbox-material' contrast and palette options
(setq doom-gruvbox-material-background  "medium"  ; or hard (defaults to soft)
     doom-gruvbox-material-palette     "mix") ; or original (defaults to material)
;; set `doom-theme'
(setq doom-theme 'doom-gruvbox-material) ; dark variant


(setq display-line-numbers-type 'relative)
#+end_src

* Org Mode
#+begin_src emacs-lisp

(setq org-directory "~/orgdirectory/")

(after! org
  (setq org-hide-emphasis-markers t))

#+end_src

* Org Roam
#+begin_src emacs-lisp

(use-package! org-roam
  :init
  (setq org-roam-directory "~/RoamWiki/"
        org-roam-db-gc-threshold most-positive-fixnum
        org-id-link-to-org-use-id t)
  :config
  (setq org-roam-database-connector 'sqlite3)
  (org-roam-db-autosync-mode +1))

#+end_src

* Org Agenda
#+begin_src emacs-lisp

(setq org-agenda-files (expand-file-name "agendamap.org" org-directory))
(setq org-agenda-custom-commands
      '(
        ("v" "Custom Agenda View"
        (
          (todo "READY" ((org-agenda-overriding-header "TICKET(S) READY FOR DEVELOPMENT:")))
          (todo "DEV" ((org-agenda-overriding-header "TICKET(S) IN DEVELOPMENT:")))
          (todo "REVIEW" ((org-agenda-overriding-header "TICKET(S) IN CODE REVIEW:")))
          (todo "QA" ((org-agenda-overriding-header "TICKET(S) IN QA:")))
          (todo "ACTIVE" ((org-agenda-overriding-header "Active Task(s):")))
          (todo "NEXT" ((org-agenda-overriding-header "Next Task(s):")))
          (todo "WAIT" ((org-agenda-overriding-header "Blocked Task(s):")))
          ;;(tags "PRIORITY=\"A\""
          ;;      ((org-agenda-overriding-header "High Priority Items:")
          ;;       (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))))
          (todo "DONE" ((org-agenda-overriding-header "Complete:")))
          (agenda "")
          (alltodo "All Tasks:")
         ))))

#+end_src

* Go Specific Configuration
** Organize imports on save
#+begin_src emacs-lisp

(add-hook 'go-mode-hook #'lsp-deferred)
;; Make sure you don't have other goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-organize-imports t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

#+end_src
** gofumpt
#+begin_src emacs-lisp

(after! lsp-mode
  (setq  lsp-go-use-gofumpt t)
  (setq  lsp-go-analyses '((fieldalignment . t)
                           (nilness . t)
                           (shadow . t)
                           (unusedparams . t)
                           (unusedwrite . t)
                           (useany . t)
                           (unusedvariable . t)))
  )

#+end_src
** gopls
#+begin_src emacs-lisp
(add-to-list 'exec-path (expand-file-name "~/go/bin"))
#+end_src

* Org Babel
** Languages to include
#+begin_src emacs-lisp

(org-babel-do-load-languages
 ;; emacs is included in doom by default so no need to add it here
 '((js . t)
   (go . t)))

(setq org-confirm-babel-evaluate nil)

#+end_src
** Structure Templates
#+begin_src emacs-lisp

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("js" . "src js"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))

#+end_src
